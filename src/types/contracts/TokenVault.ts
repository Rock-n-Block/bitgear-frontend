/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  sender: string;
  amount: string;
  shares: string;
  0: string;
  1: string;
  2: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  sender: string;
  amount: string;
  shares: string;
  0: string;
  1: string;
  2: string;
}>;
export type Harvest = ContractEventLog<{
  sender: string;
  callFee: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Pause = ContractEventLog<{}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Unpause = ContractEventLog<{}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Withdraw = ContractEventLog<{
  sender: string;
  amount: string;
  shares: string;
  0: string;
  1: string;
  2: string;
}>;

export interface TokenVault extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TokenVault;
  clone(): TokenVault;
  methods: {
    MAX_CALL_FEE(): NonPayableTransactionObject<string>;

    PERCENT_BASE(): NonPayableTransactionObject<string>;

    PID(): NonPayableTransactionObject<string>;

    balanceOf(): NonPayableTransactionObject<string>;

    calculateCurrentBalance(_of: string): NonPayableTransactionObject<string>;

    calculateHarvestRewards(): NonPayableTransactionObject<string>;

    calculateTotalPendingRewards(): NonPayableTransactionObject<string>;

    callFee(): NonPayableTransactionObject<string>;

    deposit(_amount: number | string | BN): NonPayableTransactionObject<void>;

    emergencyBalance(): NonPayableTransactionObject<string>;

    emergencyUserWithdraw(): NonPayableTransactionObject<void>;

    emergencyWithdraw(): NonPayableTransactionObject<void>;

    getPricePerFullShare(): NonPayableTransactionObject<string>;

    getTotalStakeOf(_of: string): NonPayableTransactionObject<string>;

    harvest(): NonPayableTransactionObject<void>;

    inCaseTokensGetStuck(_token: string): NonPayableTransactionObject<void>;

    masterchef(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setCallFee(
      _callFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    token(): NonPayableTransactionObject<string>;

    totalShares(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;

    userInfo(arg0: string): NonPayableTransactionObject<{
      shares: string;
      lastUserActionTime: string;
      0: string;
      1: string;
    }>;

    withdrawAll(): NonPayableTransactionObject<void>;

    withdrawShares(
      _shares: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    Harvest(cb?: Callback<Harvest>): EventEmitter;
    Harvest(options?: EventOptions, cb?: Callback<Harvest>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Pause(cb?: Callback<Pause>): EventEmitter;
    Pause(options?: EventOptions, cb?: Callback<Pause>): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    Unpause(cb?: Callback<Unpause>): EventEmitter;
    Unpause(options?: EventOptions, cb?: Callback<Unpause>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(event: "Harvest", cb: Callback<Harvest>): void;
  once(event: "Harvest", options: EventOptions, cb: Callback<Harvest>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Pause", cb: Callback<Pause>): void;
  once(event: "Pause", options: EventOptions, cb: Callback<Pause>): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "Unpause", cb: Callback<Unpause>): void;
  once(event: "Unpause", options: EventOptions, cb: Callback<Unpause>): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
